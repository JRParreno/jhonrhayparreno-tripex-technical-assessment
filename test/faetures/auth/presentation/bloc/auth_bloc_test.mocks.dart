// Mocks generated by Mockito 5.4.4 from annotations
// in jhon_rhay_parreno_technical_assessment/test/faetures/auth/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i11;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:jhon_rhay_parreno_technical_assessment/core/common/cubit/app_user_cubit.dart'
    as _i8;
import 'package:jhon_rhay_parreno_technical_assessment/core/common/entities/user_entity.dart'
    as _i6;
import 'package:jhon_rhay_parreno_technical_assessment/core/error/failure.dart'
    as _i5;
import 'package:jhon_rhay_parreno_technical_assessment/core/notifier/shared_preferences_notifier.dart'
    as _i10;
import 'package:jhon_rhay_parreno_technical_assessment/features/auth/domain/repository/auth_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.UserEntity>> signinWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signinWithGoogle,
          [],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, _i6.UserEntity>>.value(
            _i7.dummyValue<_i4.Either<_i5.Failure, _i6.UserEntity>>(
          this,
          Invocation.method(
            #signinWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.Either<_i5.Failure, _i6.UserEntity>>.value(
                _i7.dummyValue<_i4.Either<_i5.Failure, _i6.UserEntity>>(
          this,
          Invocation.method(
            #signinWithGoogle,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, _i6.UserEntity>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, String>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, String>>.value(
            _i7.dummyValue<_i4.Either<_i5.Failure, String>>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.Either<_i5.Failure, String>>.value(
                _i7.dummyValue<_i4.Either<_i5.Failure, String>>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, String>>);
}

/// A class which mocks [AppUserCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppUserCubit extends _i1.Mock implements _i8.AppUserCubit {
  @override
  _i8.AppUserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.dummyValue<_i8.AppUserState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i7.dummyValue<_i8.AppUserState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.AppUserState);

  @override
  _i3.Stream<_i8.AppUserState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i8.AppUserState>.empty(),
        returnValueForMissingStub: _i3.Stream<_i8.AppUserState>.empty(),
      ) as _i3.Stream<_i8.AppUserState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void updateUser(_i6.UserEntity? user) => super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logout() => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void failSetUser(String? message) => super.noSuchMethod(
        Invocation.method(
          #failSetUser,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void userLoggedIn() => super.noSuchMethod(
        Invocation.method(
          #userLoggedIn,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getCurrentUser() => super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.AppUserState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i8.AppUserState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SharedPreferencesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesNotifier extends _i1.Mock
    implements _i10.SharedPreferencesNotifier {
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  T getValue<T>(
    String? key,
    T? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #getValue,
            [
              key,
              defaultValue,
            ],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #getValue,
            [
              key,
              defaultValue,
            ],
          ),
        ),
      ) as T);

  @override
  _i3.Future<void> setValue<T>(
    String? key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setValue,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
