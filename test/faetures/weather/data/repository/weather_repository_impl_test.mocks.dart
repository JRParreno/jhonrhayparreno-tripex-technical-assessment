// Mocks generated by Mockito 5.4.4 from annotations
// in jhon_rhay_parreno_technical_assessment/test/faetures/weather/data/repository/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:jhon_rhay_parreno_technical_assessment/features/weather/data/datasources/weather_remote_data_source.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/weather.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeather_0 extends _i1.SmartFake implements _i2.Weather {
  _FakeWeather_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i3.WeatherRemoteDataSource {
  @override
  _i4.Future<_i2.Weather> getCurrentWeather({
    required double? longitude,
    required double? latitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [],
          {
            #longitude: longitude,
            #latitude: latitude,
          },
        ),
        returnValue: _i4.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #getCurrentWeather,
            [],
            {
              #longitude: longitude,
              #latitude: latitude,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #getCurrentWeather,
            [],
            {
              #longitude: longitude,
              #latitude: latitude,
            },
          ),
        )),
      ) as _i4.Future<_i2.Weather>);

  @override
  _i4.Future<List<_i2.Weather>> getWeatherForFiveDays({
    required double? longitude,
    required double? latitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherForFiveDays,
          [],
          {
            #longitude: longitude,
            #latitude: latitude,
          },
        ),
        returnValue: _i4.Future<List<_i2.Weather>>.value(<_i2.Weather>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Weather>>.value(<_i2.Weather>[]),
      ) as _i4.Future<List<_i2.Weather>>);
}

/// A class which mocks [Weather].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeather extends _i1.Mock implements _i2.Weather {}
