// Mocks generated by Mockito 5.4.4 from annotations
// in jhon_rhay_parreno_technical_assessment/test/faetures/weather/data/datasources/weather_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/weather.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeather_0 extends _i1.SmartFake implements _i2.Weather {
  _FakeWeather_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherFactory extends _i1.Mock implements _i2.WeatherFactory {
  @override
  _i2.Language get language => (super.noSuchMethod(
        Invocation.getter(#language),
        returnValue: _i2.Language.AFRIKAANS,
        returnValueForMissingStub: _i2.Language.AFRIKAANS,
      ) as _i2.Language);

  @override
  set language(_i2.Language? _language) => super.noSuchMethod(
        Invocation.setter(
          #language,
          _language,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i2.Weather> currentWeatherByLocation(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #currentWeatherByLocation,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i3.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #currentWeatherByLocation,
            [
              latitude,
              longitude,
            ],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #currentWeatherByLocation,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i3.Future<_i2.Weather>);

  @override
  _i3.Future<_i2.Weather> currentWeatherByCityName(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #currentWeatherByCityName,
          [cityName],
        ),
        returnValue: _i3.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #currentWeatherByCityName,
            [cityName],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #currentWeatherByCityName,
            [cityName],
          ),
        )),
      ) as _i3.Future<_i2.Weather>);

  @override
  _i3.Future<List<_i2.Weather>> fiveDayForecastByLocation(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fiveDayForecastByLocation,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i3.Future<List<_i2.Weather>>.value(<_i2.Weather>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.Weather>>.value(<_i2.Weather>[]),
      ) as _i3.Future<List<_i2.Weather>>);

  @override
  _i3.Future<List<_i2.Weather>> fiveDayForecastByCityName(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #fiveDayForecastByCityName,
          [cityName],
        ),
        returnValue: _i3.Future<List<_i2.Weather>>.value(<_i2.Weather>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.Weather>>.value(<_i2.Weather>[]),
      ) as _i3.Future<List<_i2.Weather>>);
}

/// A class which mocks [Weather].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeather extends _i1.Mock implements _i2.Weather {}
